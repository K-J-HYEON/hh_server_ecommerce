buildscript {
    ext.kotlin_version = '2.0.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'

	id 'checkstyle'
	id 'jacoco'
}
apply plugin: 'kotlin'

// jacoco report 설정
jacocoTestReport {
	reports {
		// html로 report 생성하기
		// 빌드경로/jacoco/report.html 폴더 내부로 경로 설정
		html.destination file("**/config/report.html")
	}

	// jacocoTestReport가 끝나면 jacocoTestCoverageVerification 동작
	finalizedBy 'jacocoTestCoverageVerification'
}

// jacoco 커버리지 검증 설정
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 커버리지 적용 여부
			element = 'CLASS' // 커버리지 적용 단위

			// 라인 커버리지 설정
			// 적용 대상 전체 소스 코드들을 한줄 한줄 따졌을 때 테스트 코드가 작성되어 있는 줄의 빈도
			// 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 브랜치 커버리지 설정
			// if-else 등을 활용하여 발생되는 분기들 중 테스트 코드가 작성되어 있는 빈도
			// 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 라인 최대 갯수 설정
			// 빈 줄을 제외하고 하나의 자바 파일에서 작성될 수 있는 최대 라인 갯수
			// 한 파일에 최대 500줄까지 작성되어야 함
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 500
			}
		}
	}
}

checkstyle {
	maxWarnings = 0 // 규칙이 어긋나는 코드가 하나라도 있을 경우 빌드 fail
	configFile = file("${rootDir}/config/gpu-im-checkstyle.xml") // 설정 파일 경로 지정
	configProperties = ["suppressionFile": "${rootDir}/config/naver-checkstyle-suppressions.xml"]
	toolVersion = "8.39" // 처음에 낮은 버전을 사용했더니 깨지는 현상이 있었다. 설정파일의 내용에 맞는 버전을 선택
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

group = 'hhplus'
version = '0.0.1-SNAPSHOT'

subprojects {
	apply plugin: 'io.freefair.lombok'
}

java {
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

configurations.all {
	exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	implementation 'org.redisson:redisson-spring-boot-starter:3.29.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	implementation 'com.squareup.okhttp3:okhttp:4.10.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

//	compileOnly 'com.h2database:h2'
	runtimeOnly 'com.h2database:h2'
	implementation 'com.h2database:h2'
//	testImplementation 'com.h2database:h2'
	implementation 'mysql:mysql-connector-java:8.0.29'

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.assertj:assertj-core:3.13.2'

	implementation 'commons-logging:commons-logging:1.2'
	implementation group: 'log4j', name: 'log4j', version: '1.2.17'

	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '3.0.6'

	implementation 'org.springframework.kafka:spring-kafka'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

tasks.named('test') {
	useJUnitPlatform()
}
kotlin {
    jvmToolchain(17)
}